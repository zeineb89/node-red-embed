'use strict';

const fs     = require('fs');
const path   = require('path');
const vm     = require('vm');
const EventEmitter = require('events');

// ------------------------------------------
//  CONFIG
// ------------------------------------------

require('./lib/config.js').init();
exports.CONFIG = CONFIG; 

const mkpathsync = exports.mkpathsync = (dirpath, mode) => {
    dirpath = path.resolve(dirpath);

    if (typeof mode === 'undefined') {
        mode = parseInt('0777', 8) & (~process.umask());
    }

    try {
        if (!fs.statSync(dirpath).isDirectory()) {
            throw new Error(dirpath + ' exists and is not a directory');
        }
    } catch (err) {
        if (err.code === 'ENOENT') {
            mkpathsync(path.dirname(dirpath), mode);
            fs.mkdirSync(dirpath, mode);
        } else { throw err; }
    }
};

const absURL = exports.absURL = (url) => {
    if (undefined === url) return url;
    if (url.startsWith('http')) return url;

    if(CONFIG.server === undefined || CONFIG.server.host === undefined) {
        console.log("To use relative url, please assign server.host in your configuration file");
        return url;
    }
    return CONFIG.server.host + url;
}

// ------------------------------------------
//  STRING
// ------------------------------------------

const RXP_JSFIELD = /^[a-zA-Z0-9\._]+$/
const getByStringFast = exports.getByStringFast = (obj, str, def) => { 
    if (!str) return def;
    try {
        let tmp = obj;
        for (let field of str.split('.')){
            if (tmp[field] === undefined) { return def; }
            tmp = tmp[field]
        }
        return tmp;
    } catch (err) { return def; }
}

const getByString = exports.getByString = (obj, str, def) => { 
    if (!str) return def;
    if (RXP_JSFIELD.test(str)) { return getByStringFast(obj, str, def); }
    let ctxt = { "data": obj , "value": undefined };
    const context = new vm.createContext(ctxt);
    const script  = new vm.Script("value = data."+str);
    try { script.runInContext(context); }
    catch(ex){ return def === undefined ? ex.message : def; }

    let result = ctxt.value === undefined ? def : ctxt.value;
    return result;
}

const setByStringFast = exports.setByStringFast = (obj, str, value, error) => { 
    if (!str) return def;
    try {
        let fields = str.split('.');
        let tmp = obj;
        for (let i = 0 ; i < fields.length ; i++){
            let field = fields[i];
            if (i === (fields.length-1)){ 
                tmp[field] = value; 
                return; 
            }
            if (tmp[field] === undefined) {
                return; // Should we create the object instead ?
            }
            tmp = tmp[field]
        }
    } catch (ex){ 
        if (error) error(ex)
        else console.log(ex)
     }
}

const setByString = exports.setByString = (obj, str, value, error) => {
    if (!str) return;
    if (RXP_JSFIELD.test(str)) { return setByStringFast(obj, str, value, error); }
    let ctxt = { "data": obj, "value" : value };
    const context = new vm.createContext(ctxt);
    const script  = new vm.Script("data."+str+"=value"); 
    try { script.runInContext(context); }
    catch(ex){ 
        if (error) error(ex)
        else console.log(ex)
     }
}

const resolve = exports.resolve = (str, obj, def) => {
    if (str === undefined) return str;
    
    str = fastResolve(str)
    if (obj === undefined) return str;

    let rgxp = /\{([a-zA-Z0-9_'"\|\.\[\]])+\}/i;
    for (let i = 0 ; i < 100 &&  rgxp.test(str) ; i++){
        let match  = rgxp.exec(str)[0];
        let prop   = match.substring(1, match.length-1);

        //if {obj.a|obj.b} then use obj.a if exists, obj.b otherwise
        let split  = prop.split('|');
            def    = split.length > 1 ? getByString(obj, split[1], def) : def;
            prop   = split[0];

        //basic use case
        let value  = getByString(obj, prop, "");

        //just in case : check in config
        if(value === "") {
            value = global.CONFIG ? getByString(global.CONFIG, prop, def) : def;
        }
        value  = fastResolve(value);
        
        str = str.replace(match, value)
    }
    return str;
}

const fastResolve = (str) => {
    if (typeof str !== 'string') return str;
    if (str.indexOf('{cwd}') >= 0)
        str = str.replace('{cwd}', process.cwd());
    if (str.indexOf('{timestamp}') >= 0)
        str = str.replace('{timestamp}', Date.now());

    return str
}

// ------------------------------------------
//  EVENT
// ------------------------------------------

class NodeEmitter extends EventEmitter {}
const emitter = new NodeEmitter();

const emitEvent = exports.emitEvent  = (type, node, data, config) => {
    emitter.emit(type, node, data, config);
}

const listenEvent = exports.listenEvent  = (type, callback) => {
    emitter.addListener(type, callback);
}

const removeListener = exports.removeListener =  (type, callback) => {
    emitter.removeListener(type, callback);
}

const emitAsyncEvent = exports.emitAsyncEvent  = (type, node, data, config, callback) => {

    if (countListeners(type) === 0){
        return callback(data);
    }

    data._tmp = data._tmp || {}
    data._tmp['event_emitter'] = { callback: callback, config: config };   // Only one in a flow otherwise might loose it
    emitter.emit(type, node, data, config);
}

const countListeners = exports.countListeners = (type) => {
    let listeners = emitter.listeners(type)
    if (!listeners){
        return 0;
    }
    return listeners.length;
}

const fireAsyncCallback = exports.fireAsyncCallback = (data) => {
    if (!data._tmp) return;
    if (!data._tmp.event_emitter) return;

    let callback = data._tmp.event_emitter.callback;
    if (!callback) return;

    delete data._tmp.event_emitter;
    callback(data);
}