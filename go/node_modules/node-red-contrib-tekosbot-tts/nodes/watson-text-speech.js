var _ = require('underscore');
var utils = require('../lib/helpers/utils');
var MessageTemplate = require('../lib/message-template-async');
var emoji = require('node-emoji');
var mustache = require("mustache");
var watson = require('watson-developer-cloud')

module.exports = function(RED) {

  function watsonTextSpeech(config) {
    RED.nodes.createNode(this, config);
    var node = this;
    this.message = config.message;
    this.voice = config.voice;
    this.apikey = config.apikey;
    this.answer = config.answer;
    this.endpoint = config.endpoint;
    this.parse_mode = config.parse_mode;
    this.transports = ['telegram', 'slack', 'facebook', 'smooch'];

    this.pickOne = function(messages) {
      var luck = Math.floor(Math.random() * messages.length);
      return _.isString(messages[luck]) ? messages[luck] : messages[luck].message;
    };

    this.emptyMessages = function(messages) {
      return _.isEmpty(messages) || _(messages).all(function(message) {
        // in node config elements are object, in payload are just strings
        return _.isObject(message) ? _.isEmpty(message.message) : _.isEmpty(message);
      });
    };

    this.on('input', function(msg) {

      var message = node.message;
      var voice = node.voice;
      var apikey = node.apikey;
      var answer = node.answer;
      var endpoint = node.endpoint;
      var chatId = utils.getChatId(msg);
      var messageId = utils.getMessageId(msg);
      var template = MessageTemplate(msg, node);

      // check transport compatibility
      if (!utils.matchTransport(node, msg)) {
        return;
      }

      if (_.isString(node.message) && !_.isEmpty(node.message)) {
        message = node.message;
      } else if (_.isArray(node.message) && !this.emptyMessages(node.message)) {
        message = node.pickOne(node.message);
      } else if (_.isString(msg.payload) && !_.isEmpty(msg.payload)) {
        message = msg.payload;
      } else if (_.isArray(msg.payload) && !this.emptyMessages(msg.payload)) {
        message = node.pickOne(msg.payload);
      } else if (_.isNumber(msg.payload)) {
        message = String(msg.payload);
      } else {
        node.error('Empty message');
      }

      if (message.includes("{{")){
            
            let templateName=  message.substring(message.lastIndexOf("{{"), message.lastIndexOf("}}")+2)
            templateName = mustache.render(templateName, msg.payload);
            message = message.replace(/{{.*}}/, templateName)
          }

      template(message)
        .then(function(message) {
          // // payload
          msg.payload = {
            type: "speech",
            say: message,
            voice: voice,
            endpoint: endpoint
          }

          // reply flag
          msg.payload.options = {};
          if (answer) {
            msg.payload.options.reply_to_message_id = messageId;
          }
          // send out reply
          // generate token before reply
          // var authorization = new watson.AuthorizationV1({
          //   iam_apikey: apikey
          // });

          var authorization = new watson.AuthorizationV1({
            username: 'apikey',
            password: apikey,
            url: endpoint, // Speech tokens
          });


          authorization.getToken({url: endpoint},function (err, token) {
            if (!token) {
              console.log('error:', err);
            } else {
              // Use your token here
              msg.payload.apikey = token;
              msg.payload.provider = "watson"
              node.send(msg);
            }
          });

          
        });
    });
  }

  RED.nodes.registerType('watson-text-speech', watsonTextSpeech);
};
