module.exports = function(RED) {
    "use strict";
    var DeepstreamClient = require('deepstream.io-client-js');
    var querystring = require('querystring');
    var cookieParser = require("cookie-parser");
    const axios = require('axios');
    const Queue = require('better-queue');
    if(process.env.DASHBOT_API_KEY_GENERIC && process.env.DASHBOT_API_KEY_GENERIC != '')
    	var dashbot = require('dashbot')(process.env.DASHBOT_API_KEY_GENERIC,{}).generic;


    var appUri = process.env.CHAT_APP_URI;
    var appName = process.env.CHAT_APP_NAME;
    var appSocket = process.env.CHAT_APP_SOCKET;
    var appImage = process.env.CHAT_APP_IMAGE;
    var appMessage = process.env.CHAT_APP_MESSAGE;
    

    // get app uri and app name
    var httpMiddleware = (req, res, next) => {
    	res.json({app_name: appName, app_uri: appUri})
    	//next()
    }
    var cm_handler = function(req,res,next) { next(); }
    
    var callbackApp = function(req,res) {
    		res.json({app_name: appName, app_uri: appUri})
        };
    var errorHandler = function(err,req,res,next) {
                node.warn(err);
                res.sendStatus(500);
            };
    RED.httpNode.get('/appParams',cookieParser(),httpMiddleware,cm_handler,cm_handler,callbackApp,errorHandler);
    // RED.httpNode.get('/appParams',cookieParser(),httpMiddleware,null,null,callbackApp,null);
    // RED.httpNode.get('/appParams',null,httpMiddleware);
    

    // get chat app
    function getApp(key, secret, callback){
    	// call api to get app details
		axios.defaults.headers.common['api-token'] = secret;
		let basic_url = process.env.PROXY_URL || 'http://server.tekos.co:12050'
		axios.get(basic_url+'/ChatApp/info/'+key).then(resp => {
			callback(resp.data);
		})
    }

    function msgOutLog(uid, msg){
    	if(process.env.DASHBOT_API_KEY_GENERIC && process.env.DASHBOT_API_KEY_GENERIC != '')
	    	dashbot.logOutgoing({
	    		text: msg.text[0],
	    		userId: uid,
	    		conversationId: msg.uid,
	    		platformJson: msg
	    	})
    }
    // msg.content
    function msgInLog(uid, msg){
    	if(process.env.DASHBOT_API_KEY_GENERIC && process.env.DASHBOT_API_KEY_GENERIC != '')
	    	dashbot.logIncoming({
	    		text: msg.content,
	    		userId: uid,
	    		conversationId: uid,
	    		platformJson: msg
	    	})
    }

    function DeepstreamServerNode(config) {
        RED.nodes.createNode(this, config);
        this.server = config.server;
        this.port = config.port;
        this.name = config.name;
		this.methode = config.method;
        this.username = this.credentials.user;
        this.password = this.credentials.password;
		this.subscriptionTimeout = config.subscriptionTimeout || 500;
		this.rpcAckTimeout = config.rpcAckTimeout || 6000;
		this.rpcResponseTimeout = config.rpcResponseTimeout || 10000;
    }
	
    RED.nodes.registerType("deepstream-server", DeepstreamServerNode,{
        credentials: {
            user: {type:"text"},
            password: {type: "password"}
        }
    });


	function createDSClient(node, config, callback) {
		try {
			if (!node.client) {
				// node.server = config.server;
				node.topic = config.topic;				
				// node.serverConfig = RED.nodes.getNode(node.server);					
				
				var dsServer = process.env.DS_SERVER || "ws://server.tekos.co";
					dsServer += ':' + (process.env.DS_PORT || "6020")
				
				var options = {};
					options.rpcAckTimeout = 500;
					options.rpcAckTimeout = 6000;
					options.rpcAckTimeout = 10000;
				
				
				node.client = new DeepstreamClient(dsServer, options);	
				
				node.client.on("error", function(error) {
					node.status({fill:"grey",shape:"dot",text:"error - " + error});
					node.warn(error);
					try {
						node.client.close();
					} catch (err) { 
						console.log('Error - ' + JSON.stringify(err)); 
					}
					delete node.client;
					console.log('Reconnection in 5 secondes'); 
					setTimeout(createDSClient, 5000, node, config, callback);
				});			
				deepstreamLogin(node, callback);				
			} else {
				if (node.client.getConnectionState() !== 'OPEN') {
					deepstreamLogin(node, callback);
				} else {
					callback(node.client);
				}
			}
		} catch (err) {
			node.error(err);
		}
	}
	
	function deepstreamLogin(node, callback) {
		node.client.login({}, (success, data) => {
			if (success) {						
				if (typeof callback === 'function') {
					callback(node.client);
				}
			} else {
				node.status({fill:"red",shape:"ring",text:"error - " + data});
				node.warn("Error while login in", data);							
			}
		});
	}
	
	/****************************** DS Message app *******************************/


	function DSMessageApp(config) {
		var node = this;
	    RED.nodes.createNode(node, config);
        node.appName = config.appName;
        node.socket = config.socket;
        node.uri = appUri || 'tekos';
		node.startMessage = config.startMessage;
		node.image = config.image;
	    
	    createDSClient(node, config, function(client) {
			try {

				var apps = client.record.getRecord('chat/apps');
				apps.set(node.uri+'.'+node.appName, 
							{
								name: node.appName,
								socket: node.socket,
								uri: node.uri,
								startMessage: node.startMessage,
								image: node.image

							})
			
			} catch(err) {
				node.error(err);
			}
		});	
	

		node.on("error", function(error) {
			node.error("DSMessageAPP Error - " + error);
        });
	
	
    }
	
    RED.nodes.registerType("hanna-app", DSMessageApp);



	/****************************** RPC MAKE *******************************/
    function DeepstreamRpcMakeNode(config) {
        var node = this;
		RED.nodes.createNode(node, config);		
				
		node.on("input", function(msg) {
			createDSClient(node, config, function(client) {
				try {
					var method = msg.topic || config.method; 
					client.rpc.make(method, msg.payload, function(error, result){
						if (error) {
							node.error("Error while RPC Make - " + error);			
						} else {
							msg.payload = result;
							node.send(msg);
						}
					});
				} catch(err) {
					node.error(err);
				}
			});
        });			        

		node.on("error", function(error) {
			node.error("DeepstreamRpcMakeNode Error - " + error);
        });
		
        node.on("close", function(done) {
            if (node.client) {
                node.client.close();
				delete node.client;
            }
            done();
        });
    }
	
	/****************************** RPC PROVIDE *******************************/
		
    function DeepstreamRpcProvideNode(config) {
        var node = this;
		RED.nodes.createNode(node, config);
		
		node.status({fill:"grey",shape:"ring",text:"connecting"});
		createDSClient(node, config, function(client) {
			try {
				node.status({fill:"green",shape:"dot",text:"connected"});
				var method = config.method; 
				client.rpc.provide(method, function() {		
					var msg = {
						res : arguments[arguments.length-1],
						payload : []
					};
					
					for(var i in arguments) {
						if (i <  arguments.length-1) {
							msg.payload.push(arguments[i]);
						} else {
							break;
						}						
					}	
						
					node.send(msg);							
				});
			} catch(err) {
				node.error(err);
			}
		});		     
		
		node.on("error", function(error) {
			node.error("DeepstreamRpcProvideNode Error - " + error);
        });
		
        node.on("close", function(done) {
            if (node.client) {
                node.client.close();
				delete node.client;
            }
            done();
        });
    }
	
	/****************************** RPC RESPONSE *******************************/
		
    function DeepstreamRpcResponseNode(config) {
        var node = this;
		RED.nodes.createNode(node, config);

		node.on("input", function(msg) {
			try {				
				if (!msg.res) {
					node.error('Error, no res in message');
					node.status({fill:"red",shape:"dot",text:"no response in msg"});
				} else {
					if (msg.err) {
						msg.res.error(msg.err);
					} else {
						msg.res.send(msg.payload);
					}
				}		 	
			} catch (err) {
				node.error(err);
			}						
		});
		
		node.on("error", function(error) {
			node.error("DeepstreamRpcResponseNode Error - " + error);
        });
    }
	
	/****************************** DS Event emit *******************************/
    function DeepstreamEventEmitNode(config) {
        var node = this;
		RED.nodes.createNode(node, config);		
				
		node.on("input", function(msg) {
			createDSClient(node, config, function(client) {
				try {
					client.event.emit((msg.topic || config.method), msg.payload);
					node.send(msg);
				} catch(err) {
					node.error(err);
				}
			});
        });			        

        node.on("close", function(done) {
            if (node.client) {
                node.client.close();
				delete node.client;
            }
            done();
        });
    }
    
	
	/****************************** Event subscribe *******************************/
		
    function DeepstreamEventSubscribeNode(config) {
        var node = this;
		RED.nodes.createNode(node, config);
		
		node.status({fill:"grey",shape:"ring",text:"connecting"});
		createDSClient(node, config, function(client) {
			try {
				node.status({fill:"green",shape:"dot",text:"connected"});
				var method = config.method; 
				client.event.subscribe(method, function(data) {						
					var msg = {
						payload : data
					}
					node.send(msg);							
				});				
			} catch(err) {
				node.error(err);
			}
		});		     
        node.on("close", function(done) {
            if (node.client) {
                node.client.close();
				delete node.client;
            }
            done();
        });		
    }

	/****************************** DS Message receive *******************************/
		
    function DSMessageReceive(config) {
        var node = this;
		RED.nodes.createNode(node, config);
		node.status({fill:"grey",shape:"ring",text:"connecting"});
		createDSClient(node, config, function(client) {
			try {
				node.status({fill:"green",shape:"dot",text:"connected"});
				var method = config.method; 
				if(!!config.msApp){
					node.msApp = RED.nodes.getNode(config.msApp);
					var app_path = (appUri || 'tekos')+"/"+node.msApp.appName+"/"+method;
					
				}else{
					
					var app_path = appUri+"/"+appName+"/"+method;
				}

				// getApp(node.msApp.appkey,node.msApp.userSecret, function(res){
					// if(!res.app){
					// 	node.error('app not found');
					// 	return;
					// }
					client.event.subscribe(app_path, function(data) {
						if(data.text && data.text[0] ){
							var id = (Date.now() + Math.random().toString(36).substr(2, 100)).toString(36);
							var m = data.text[0].match(/\@app\s(.*)/);
							// msgOutLog(data.uid,data);
							if (m && m[1]){
								var record = client.record.getRecord('user/'+data.uid);
								var apps = client.record.getRecord('chat/apps');
								// change app
								var appUri = m[1]
								apps.whenReady(app => {
									var appData = app.get(appUri);
									if(appData){	
										appData['change'] = id;
										record.whenReady(user => {
											user.set('chat.config', appData);
											// NEED TO CHECK
											//user.set('chat.config.socket', appData.socket);
										})
										
									}

								})
							}
						}
						var msg = {
							payload : data,
							uid: data.uid,
							user: data.user
						}
						if(!(m && m[1]))
							node.send(msg);							
					});				
				// })


			} catch(err) {
				node.error(err);
			}
		});		     

        node.on("close", function(done) {
            if (node.client) {
                node.client.close();
				delete node.client;
            }
            done();
        });		
    }
	
	/****************************** DS Message Router *******************************/
		
    function DSMessageRouter(config) {
        var node = this;
		RED.nodes.createNode(node, config);
		
		node.status({fill:"grey",shape:"ring",text:"connecting"});
		createDSClient(node, config, function(client) {
			try {
				node.status({fill:"green",shape:"dot",text:"connected"});
				var method = config.method; 
				// node.msApp = RED.nodes.getNode(config.msApp);
				// getApp(node.msApp.appKey,node.msApp.userSecret, function(res){
					if(!res.app){
						node.error('app not found in route');
						return;
					}
					var app_path = appUri+"/"+appName+"/root";
					client.event.subscribe(app_path, function(data) {
						var msg = {
							payload: data,
							topic: data.listener
						}
						node.send(msg);							
					});				
				// })

			} catch(err) {
				node.error(err);
			}
		});		     

        node.on("close", function(done) {
            if (node.client) {
                node.client.close();
				delete node.client;
            }
            done();
        });		
    }
	
	/****************************** DS Message Listener *******************************/
		
    function DSMessageListener(config) {
        var node = this;
		RED.nodes.createNode(node, config);
		
		node.status({fill:"grey",shape:"ring",text:"connecting"});
		createDSClient(node, config, function(client) {
			try {
				node.status({fill:"green",shape:"dot",text:"connected"});
				var method = config.method; 
				client.event.subscribe(method, function(uid) {						
					if(uid){
						var record = client.record.getRecord('user/'+uid);
						record.subscribe('chat.messages', function(data){
							var msg = {
								payload: data,
								uid: uid
							}
							node.send(msg);		
						})
					}								
				});
			} catch(err) {
				node.error(err);
			}
		});		     

        node.on("close", function(done) {
            if (node.client) {
                node.client.close();
				delete node.client;
            }
            done();
        });		
    }
	
	/****************************** Record update *******************************/
    function DeepstreamRecordUpdateNode(config) {
        var node = this;
		RED.nodes.createNode(node, config);		
				
		node.on("input", function(msg) {
			createDSClient(node, config, function(client) {
				try {					
					var record = client.record.getRecord(config.recordPath);					
					if (config.path) {
						record.set(config.path, msg.payload);
					} else {
						record.set(msg.payload);
					}	
					node.status({});
				} catch(err) {
					node.error(err);
				}
			});
        });			        

        node.on("close", function(done) {
            if (node.client) {
                node.client.close();
				delete node.client;
            }
            done();
        });
    }
    
	/****************************** DS Message send *******************************/
    function DSMessageSend(config) {
        var node = this;
		RED.nodes.createNode(node, config);		
		node.msApp = RED.nodes.getNode(config.msApp);		
		let q = new Queue( (msg,cb) => {
			createDSClient(node, config, function(client) {
				try {
					// update config client for listen next event if exist
					// get record_path 'user/uid'
					
					msg.record_path = msg.record_path || 'user/'+msg.uid+'/'+node.msApp.appName;				
					var record = client.record.getRecord(msg.record_path);
					// msg.payload.changed =  msg.payload.changed=="yes" ? "ok" : "yes";
					// if(!config.nextUri && !msg.next_app_uri)
					/*console.log()*/
					var id = (Date.now() + Math.random().toString(36).substr(2, 100)).toString(36);
					msg.payload.changeLog = id;
					//setTimeout(function() {
						record.set('chat.returnMsg',msg.payload);
					//}, 200);
					// msgInLog(msg.uid, msg.payload)
					if(config.nextListener){

						record.set('chat.configSocket', config.nextListener);

					}
					if(config.nextUri || msg.next_app_uri){

						var apps = client.record.getRecord('chat/apps');
						var appPath = (msg.next_app_uri || appUri)+"."+(msg.next_app_name || appName)
						apps.whenReady(app => {
							var appData = app.get(appPath);
							if(appData){	
								record.whenReady(user => {
									appData.socket = config.nextListener || appData.socket;
									user.set('chat.config', appData);
									//user.set('chat.config.socket', config.nextListener);
								})
							}
						})
					}
					
					node.status({});

				} catch(err) {
					node.error(err);
				} finally {
					cb()
				}
			});
		})
		node.on("input", function(msg) {
			setTimeout(function() {
				q.push(msg)
			}, 200);
        });			        

        node.on("close", function(done) {
            if (node.client) {
                node.client.close();
				delete node.client;
            }
            done();
        });
    }
    

	/****************************** CREATE ACTION NODE *******************************/
    function createActionNode(node,config, options=null,timeout=10){
    	config.emitTo = config.emitTo || (Date.now() + Math.random().toString(36).substr(2, 100)).toString(36);
    	RED.nodes.createNode(node, config);		
		node.msApp = RED.nodes.getNode(config.msApp);
		node.status({fill:"grey",shape:"ring",text:"connecting"});
		createDSClient(node, config, function(client) {
			try {
					node.status({fill:"green",shape:"dot",text:"connected"});
				
					client.event.subscribe("trigger/"+config.emitTo, function(data){
						var msg = {
							payload : data,
							uid: data.uid
						}
						console.log("data from contacts ...",data);
						node.send(msg);		
					})
					node.on("input", function(msg) {
						console.log("ask for data ....");
						var record = client.record.getRecord('user/'+msg.uid+'/'+node.msApp.appName);
						let params = msg.params || options;
						var id = (Date.now() + Math.random().toString(36).substr(2, 100)).toString(36);
						setTimeout(function() {
							record.set('chat.actionRequest',{id: id , action: config.action, emit_to: config.emitTo, params: params } )
						}, timeout);

					});
				} catch(err) {
					node.error(err);
				}
		});		  

		

        node.on("close", function(done) {
            if (node.client) {
                node.client.close();
				delete node.client;
            }
            done();
        });
    }
	
	/****************************** DS Action Trigger *******************************/
    function DSActionTrigger(config) {
        createActionNode(this,config)
		
    }
    	
	/****************************** DS Manage Apps *******************************/
    function ManageApps(config) {
		createActionNode(this, Object.assign(config,{action: 'manage_apps'}))
    }
    
    /****************************** DS Clear Msgs *******************************/
    function ClearMsgs(config) {
        createActionNode(this, Object.assign(config,{action: 'clear_msgs'}))
		

    }
/****************************** DS Clear Msgs *******************************/
    function DisableInput(config) {
        createActionNode(this, Object.assign(config,{action: 'disable_input'}),null, 1000)
		

    }

    /****************************** DS Upload Imgs *******************************/
    function UploadImgs(config) {
        createActionNode(this, Object.assign(config,{action: 'upload_imgs'}))
       
    }

    /****************************** DS Upload Img *******************************/
    function UploadImg(config) {
        createActionNode(this, Object.assign(config,{action: 'upload_img'}))
       
    }

    /****************************** DS Authentication *******************************/
    function Authentication(config) {
        createActionNode(this, Object.assign(config,{action: 'authenticate'}))
        
    }
	
    /****************************** DS Stripe pay *******************************/
    function StripePay(config) {
    	let params = {
    		"publishable-key": config.public_key,
    		image: config.image,
    		name: config.btn_name,
    		description: config.description,
    		locale: (config.locale || "auto"),
    		email: config.email,
    		amount: config.amount,
    		currency: config.currency
    	}
        createActionNode(this, Object.assign(config,{action: 'stripe_pay'}),params)
        
    }
	
    /****************************** DS Redirect Result after action *******************************/
    function RedirectResult(config) {
    	let node = this;
        
    	RED.nodes.createNode(node, config);		
		node.status({fill:"grey",shape:"ring",text:"connecting"});
		createDSClient(node, config, function(client) {
			try {
					node.status({fill:"green",shape:"dot",text:"connected"});
				
					node.on("input", function(msg) {
						let app_name = msg.payload.app.name;
						let app_uri = msg.payload.app.uri;
						let app_path = app_uri+"/"+app_name+"/"+config.redirect;
						delete msg.payload.app;
						client.event.emit(app_path, msg.payload)
						
					});
				} catch(err) {
					node.error(err);
				}
		});		  

		

        node.on("close", function(done) {
            if (node.client) {
                node.client.close();
				delete node.client;
            }
            done();
        });
        
    }
	
	/****************************** DS App switcher *******************************/
    function DSAppSwitcher(config) {
        var node = this;
		RED.nodes.createNode(node, config);		
		let q = new Queue( (msg, cb) => {
			createDSClient(node, config, function(client) {
				try {
					// update config client for listen next event if exist
					// get record_path 'user/uid'
					// global appName
					msg.record_path = 'user/'+msg.uid+'/'+appName;				
					var userData = client.record.getRecord(msg.record_path);
					var apps = client.record.getRecord('chat/apps');
					let appPathSw = (msg.app_uri || config.uri)+"."+(msg.app_name || config.appName)
					apps.whenReady(app => {
						var appData = app.get(appPathSw);
						if(appData){	
							client.event.emit(appData.uri+"/"+appData.name+"/"+(msg.listener || config.listener || appData.socket), msg); 
							userData.whenReady(user => {
								user.set('chat.config', appData);
								/*user.set('chat.returnMsg',{
									type:"message",
									content: appData.message,
									say: appData.message
								})*/
								//send msg to new app 
								console.log("emit data to new app ", appData.socket)
								
							})
							
						}

					})
					
					node.status({});
				} catch(err) {
					node.error(err);
				} finally {
					cb()
				}
			});
		})
				
		node.on("input", function(msg) {
			setTimeout(function() {
				q.push(msg);
			}, 50);
        });			        

        node.on("close", function(done) {
            if (node.client) {
                node.client.close();
				delete node.client;
            }
            done();
        });
    }
    
	
	/****************************** Record subscribe *******************************/		
    function DeepstreamRecordSubscribeNode(config) {    
		var node = this;
		RED.nodes.createNode(node, config);		
		
		node.on("input", function(msg) {
			node.status({fill:"grey",shape:"ring",text:"connecting"});
			createDSClient(node, config, function(client) {
				try {
					node.status({fill:"green",shape:"dot",text:"connected"});
					var record = client.record.getRecord(config.recordPath);
					node.send({
						'topic'   : 'record',
						'payload' : record.get()
					})
					if (config.path) {				
						record.subscribe(config.path, function(data) {					
							var msg = {
								'topic'   : 'update',
								'payload' : data
							}
							node.send(msg);							
						});
					} else {
						record.subscribe( function(data) {					
							var msg = {
								'topic'   : 'update',
								'payload' : data
							}
							node.send(msg);							
						});
					}
				} catch(err) {
					node.error(err);
				}
			});		
		});			

        node.on("close", function(done) {
            if (node.client) {
                node.client.close();
				delete node.client;
            }
            done();
        });
    }
	
	/****************************** Record Get *******************************/		
    function DeepstreamRecordGetNode(config) {    
		var node = this;
		RED.nodes.createNode(node, config);		
				
		node.on("input", function(msg) {
			node.status({fill:"grey",shape:"ring",text:"connecting"});
			createDSClient(node, config, function(client) {
				try {
					node.status({fill:"green",shape:"dot",text:"connected"});
					var record = client.record.getRecord(config.recordPath);
					var msg = {
						'payload' : record.get()
					};				
					node.send(msg);	
					
				} catch(err) {
					node.error(err);
				}
			});		     
		});

        node.on("close", function(done) {
            if (node.client) {
                node.client.close();
				delete node.client;
            }
            done();
        });
    }
	
	
	/****************************** Register *******************************/		
 //    RED.nodes.registerType("Deepstream RPC make",DeepstreamRpcMakeNode);
 //    RED.nodes.registerType("Deepstream RPC provide",DeepstreamRpcProvideNode);
 //    RED.nodes.registerType("Deepstream RPC response",DeepstreamRpcResponseNode);
	
 //    RED.nodes.registerType("Deepstream Event emit",DeepstreamEventEmitNode);
	// RED.nodes.registerType("Deepstream Event subscribe",DeepstreamEventSubscribeNode);
	RED.nodes.registerType("DS Message receive",DSMessageReceive);
	// RED.nodes.registerType("DS Message Router", DSMessageRouter);
	// RED.nodes.registerType("DS Message listener",DSMessageListener);
	
	// RED.nodes.registerType("Deepstream Record get",DeepstreamRecordGetNode);
	// RED.nodes.registerType("Deepstream Record update",DeepstreamRecordUpdateNode);
	RED.nodes.registerType("DS Message send",DSMessageSend);
	RED.nodes.registerType("DS App switcher",DSAppSwitcher);
	RED.nodes.registerType("DS Action Trigger",DSActionTrigger);
	RED.nodes.registerType("Authentication",Authentication);
	RED.nodes.registerType("stripe-pay",StripePay);
	RED.nodes.registerType("Manage Apps",ManageApps);
	RED.nodes.registerType("Clear Messages",ClearMsgs);
	RED.nodes.registerType("Disable Msg Input",DisableInput);
	RED.nodes.registerType("Upload Images",UploadImgs);
	RED.nodes.registerType("Upload Image",UploadImg);
	RED.nodes.registerType("Redirect Action",RedirectResult);

	// RED.nodes.registerType("Deepstream Record subscribe",DeepstreamRecordSubscribeNode);

};