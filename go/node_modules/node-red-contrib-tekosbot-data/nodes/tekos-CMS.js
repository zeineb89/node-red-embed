var mustache = require("mustache");
module.exports = function(RED) {
    "use strict";
    const axios = require('axios')

    var jwt_strapi = ''; 
    var server_strapi = ''
    var headers = {}
	/****************************** Headless CONFIG *******************************/
    function HeadlessJWT(config){
    	var node = this;
    	RED.nodes.createNode(node, config);

		let username = config.username_strapi
		let password = config.password_strapi
		server_strapi = config.server_strapi
		// Request API.		
		axios.post(server_strapi+'/auth/local', {
		      identifier: username,
		      password: password
		  })
		  .then(response => {
		    // Handle success.
		    jwt_strapi = response.data.jwt;
		    headers = {
				'Authorization': 'Bearer '+jwt_strapi
			}
			// axios.defaults.headers.common = headers;
		  })
		  .catch(error => {
		    // Handle error.
		    console.log('An error occurred:', error);
		  });
    }
    RED.nodes.registerType("headless-app",HeadlessJWT);

/* *************************************************** Headless CMS *****************************************************/
	
	/****************************** Headless cms find *******************************/
	function findAll(config){
		return new Promise(resolve => {
			let model = config.model
			axios.request({url: server_strapi+'/'+model, method: 'get' , headers: headers})
			.then(response => {
			    resolve({success :true, data:response.data});
			})
			.catch(error => {
			    resolve({error :true, message:error});
			    console.log('An error occurred:', error);
			});
			
		})
	}
	/****************************** Headless cms create *******************************/
	function createOne(msg,config){
		return new Promise(resolve => {
			console.log(config)
			let model = config.model
			let body = msg.payload
			axios.request({url: server_strapi+"/"+model, data: body, method: 'post',headers: headers})
	        .then(response => {
			    resolve({success :true, data: response.data});
			})
			.catch(error => {
			    resolve({error :true, message:error});
			});
			
		})
	}
	/****************************** Headless cms findOne *******************************/
	function findOne(msg,config){
		return new Promise(resolve => {
			console.log(config)
			console.log(msg)
			let model = config.model

			let _id = config.uidStrapi
			if (_id.includes("{{")){
	            let id =  _id.replace("{{","").replace("}}","")
	            _id = msg[id]
	        }
			axios.request( {url: server_strapi+'/'+model+'/'+_id, method: 'get' , headers: headers})
			.then(response => {
			    // Handle success.
			    resolve({success :true, data:response.data});
			})
			.catch(error => {
			    resolve({error :true, message:error});
			    console.log('An error occurred:', error);
			});
			
		})
	}

	/****************************** Headless cms delete *******************************/
	function deleteOne(msg,config){
		return new Promise(resolve => {
			console.log(config)
			let model = config.model
			let _id = config.uidStrapi
			if (_id.includes("{{")){
	            let id =  _id.replace("{{","").replace("}}","")
	            _id = msg[id]
	        }
			axios.request( {url: server_strapi+'/'+model+'/'+_id, method: 'delete' , headers: headers})
			.then(response => {
			    console.log(response)
			    resolve({success :true});
			})
			.catch(error => {
			    resolve({error :true, message:error});
			    console.log('An error occurred:', error);
			});
		})
	}
	/****************************** Headless cms UPDATE *******************************/
	function updateOne(msg,config){
		return new Promise(resolve => {
			console.log(config)
			let model = config.model
			let data = msg.payload
			let _id = config.uidStrapi
			if (_id.includes("{{")){
	            let id =  _id.replace("{{","").replace("}}","")
	            _id = msg[id]
	        }
			axios.request( {url: server_strapi+'/'+model+'/'+_id, method: 'put',data: data , headers: headers})
			.then(response => {
			    console.log(response.data)
			    resolve({success :true, data : response.data});
			})
			.catch(error => {
			    resolve({error :true, message:error});
			});
		})
	}
	/****************************** HEADLESS CMS *******************************/
	function HeadlessCMS(config) {

        var node = this;
		RED.nodes.createNode(node, config);		
		node.on("input", async function(msg){
					console.log(config)
					switch (config.method){
						case "find" : 
							msg.payload = await findAll(config);
							break;
						case "create" : 
							msg.payload = await createOne(msg,config);
							break;
						case "findone" : 
							msg.payload = await findOne(msg,config);
							break;
						case "destroy" : 
							msg.payload = await deleteOne(msg,config);
						break;
						case "update" : 
							msg.payload = await updateOne(msg,config);
						break;
					}
					console.log(msg)	
			node.send(msg);	
        });		

    }
	RED.nodes.registerType("Headless CMS",HeadlessCMS); 
};