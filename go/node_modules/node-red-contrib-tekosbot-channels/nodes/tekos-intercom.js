module.exports = function(RED) {

    "use strict";
    const axios = require('axios')
	var serverApi = "https://api.intercom.io/conversations/"
    var AUTH_TOKEN = '';

    function IntercomAuth(config){
    	var node = this;
    	RED.nodes.createNode(node, config);
    	AUTH_TOKEN = config.authToken
		axios.defaults.baseURL = serverApi;
		axios.defaults.headers.post['Content-Type'] = 'application/json';

				
    }
    RED.nodes.registerType("intercom-config",IntercomAuth);

	
	/****************************** Intercom Replying to a Conversation *******************************/
	async function replyingConversation(msg,config){
		return new Promise (async resolve => {
			let conversationId = msg.conversationId || config.conversationId
			let userId = msg.payload.userId || config.userId
			let body = msg.payload.content || config.body
			let messageType = msg.payload.messageType || config.messageType
		    axios.request({
		    	url: serverApi+conversationId+"/reply",
		    	method: 'post',
		    	data: {intercom_user_id: userId, body: body,
		     			type: "user", message_type: messageType},
		     	headers: {'Authorization': 'Bearer '+AUTH_TOKEN}}).then((res)=>{
			  	resolve(res.data)
			}).catch(err => {
				resolve({error: true, message: err})
			})
		
		})
		
	}
	

	/****************************** Intercom *******************************/
   function IntercomNode(config) {

        var node = this;
		RED.nodes.createNode(node, config);		
		node.on("input", async function(msg){
				msg.payload = await replyingConversation(msg,config);
				 
        
			node.send(msg);	
        });		

    }
	RED.nodes.registerType("Intercom",IntercomNode);
};