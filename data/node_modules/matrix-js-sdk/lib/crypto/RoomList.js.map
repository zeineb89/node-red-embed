{"version":3,"sources":["../../src/crypto/RoomList.js"],"names":["RoomList","cryptoStore","_cryptoStore","_roomEncryption","doTxn","IndexedDBCryptoStore","STORE_ROOMS","txn","getEndToEndRooms","result","roomId","Boolean","getRoomEncryption","roomInfo","storeEndToEndRoom"],"mappings":";;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;AAEA;;;IAGqBA,Q;AACjB,sBAAYC,WAAZ,EAAyB;AAAA;;AACrB,aAAKC,YAAL,GAAoBD,WAApB;;AAEA;AACA,aAAKE,eAAL,GAAuB,EAAvB;AACH;;;;;;;;;;;;;8DAGS,KAAKD,YAAL,CAAkBE,KAAlB,CACF,WADE,EACW,CAACC,+BAAqBC,WAAtB,CADX,EAC+C,UAACC,GAAD,EAAS;AACtD,0CAAKL,YAAL,CAAkBM,gBAAlB,CAAmCD,GAAnC,EAAwC,UAACE,MAAD,EAAY;AAChD,8CAAKN,eAAL,GAAuBM,MAAvB;AACH,qCAFD;AAGH,iCALC,C;;;;;;;;;;;;;;;;;;0CASQC,M,EAAQ;AACtB,mBAAO,KAAKP,eAAL,CAAqBO,MAArB,KAAgC,IAAvC;AACH;;;wCAEeA,M,EAAQ;AACpB,mBAAOC,QAAQ,KAAKC,iBAAL,CAAuBF,MAAvB,CAAR,CAAP;AACH;;;;4GAEuBA,M,EAAQG,Q;;;;;;;AAC5B;AACA;AACA;AACA,qCAAKV,eAAL,CAAqBO,MAArB,IAA+BG,QAA/B;;8DACM,KAAKX,YAAL,CAAkBE,KAAlB,CACF,WADE,EACW,CAACC,+BAAqBC,WAAtB,CADX,EAC+C,UAACC,GAAD,EAAS;AACtD,2CAAKL,YAAL,CAAkBY,iBAAlB,CAAoCJ,MAApC,EAA4CG,QAA5C,EAAsDN,GAAtD;AACH,iCAHC,C;;;;;;;;;;;;;;;;;;KA1Dd;;;;;;;;;;;;;;;;AAgBA;;;;;;kBAWqBP,Q","file":"RoomList.js","sourcesContent":["/*\nCopyright 2018, 2019 New Vector Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * @module crypto/RoomList\n *\n * Manages the list of encrypted rooms\n */\n\nimport IndexedDBCryptoStore from './store/indexeddb-crypto-store';\n\n/**\n * @alias module:crypto/RoomList\n */\nexport default class RoomList {\n    constructor(cryptoStore) {\n        this._cryptoStore = cryptoStore;\n\n        // Object of roomId -> room e2e info object (body of the m.room.encryption event)\n        this._roomEncryption = {};\n    }\n\n    async init() {\n        await this._cryptoStore.doTxn(\n            'readwrite', [IndexedDBCryptoStore.STORE_ROOMS], (txn) => {\n                this._cryptoStore.getEndToEndRooms(txn, (result) => {\n                    this._roomEncryption = result;\n                });\n            },\n        );\n    }\n\n    getRoomEncryption(roomId) {\n        return this._roomEncryption[roomId] || null;\n    }\n\n    isRoomEncrypted(roomId) {\n        return Boolean(this.getRoomEncryption(roomId));\n    }\n\n    async setRoomEncryption(roomId, roomInfo) {\n        // important that this happens before calling into the store\n        // as it prevents the Crypto::setRoomEncryption from calling\n        // this twice for consecutive m.room.encryption events\n        this._roomEncryption[roomId] = roomInfo;\n        await this._cryptoStore.doTxn(\n            'readwrite', [IndexedDBCryptoStore.STORE_ROOMS], (txn) => {\n                this._cryptoStore.storeEndToEndRoom(roomId, roomInfo, txn);\n            },\n        );\n    }\n}\n"]}