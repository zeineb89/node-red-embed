{"version":3,"sources":["../../src/crypto/recoverykey.js"],"names":["encodeRecoveryKey","decodeRecoveryKey","OLM_RECOVERY_KEY_PREFIX","key","buf","Uint8Array","length","set","parity","i","base58key","bs58","encode","match","join","recoverykey","result","decode","replace","b","Error","global","Olm","PRIVATE_KEY_LENGTH","slice"],"mappings":";;;;;;;;;;QAsBgBA,iB,GAAAA,iB;QAeAC,iB,GAAAA,iB;;AArBhB;;;;;;AAEA;AACA;AACA,IAAMC,0BAA0B,CAAC,IAAD,EAAO,IAAP,CAAhC,C,CApBA;;;;;;;;;;;;;;;;AAsBO,SAASF,iBAAT,CAA2BG,GAA3B,EAAgC;AACnC,QAAMC,MAAM,IAAIC,UAAJ,CAAeH,wBAAwBI,MAAxB,GAAiCH,IAAIG,MAArC,GAA8C,CAA7D,CAAZ;AACAF,QAAIG,GAAJ,CAAQL,uBAAR,EAAiC,CAAjC;AACAE,QAAIG,GAAJ,CAAQJ,GAAR,EAAaD,wBAAwBI,MAArC;;AAEA,QAAIE,SAAS,CAAb;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIL,IAAIE,MAAJ,GAAa,CAAjC,EAAoC,EAAEG,CAAtC,EAAyC;AACrCD,kBAAUJ,IAAIK,CAAJ,CAAV;AACH;AACDL,QAAIA,IAAIE,MAAJ,GAAa,CAAjB,IAAsBE,MAAtB;AACA,QAAME,YAAYC,aAAKC,MAAL,CAAYR,GAAZ,CAAlB;;AAEA,WAAOM,UAAUG,KAAV,CAAgB,SAAhB,EAA2BC,IAA3B,CAAgC,GAAhC,CAAP;AACH;;AAEM,SAASb,iBAAT,CAA2Bc,WAA3B,EAAwC;AAC3C,QAAMC,SAASL,aAAKM,MAAL,CAAYF,YAAYG,OAAZ,CAAoB,IAApB,EAA0B,EAA1B,CAAZ,CAAf;;AAEA,QAAIV,SAAS,CAAb;AAH2C;AAAA;AAAA;;AAAA;AAI3C,wDAAgBQ,MAAhB,4GAAwB;AAAA,gBAAbG,CAAa;;AACpBX,sBAAUW,CAAV;AACH;AAN0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAO3C,QAAIX,WAAW,CAAf,EAAkB;AACd,cAAM,IAAIY,KAAJ,CAAU,kBAAV,CAAN;AACH;;AAED,SAAK,IAAIX,IAAI,CAAb,EAAgBA,IAAIP,wBAAwBI,MAA5C,EAAoD,EAAEG,CAAtD,EAAyD;AACrD,YAAIO,OAAOP,CAAP,MAAcP,wBAAwBO,CAAxB,CAAlB,EAA8C;AAC1C,kBAAM,IAAIW,KAAJ,CAAU,kBAAV,CAAN;AACH;AACJ;;AAED,QACIJ,OAAOV,MAAP,KACAJ,wBAAwBI,MAAxB,GAAiCe,OAAOC,GAAP,CAAWC,kBAA5C,GAAiE,CAFrE,EAGE;AACE,cAAM,IAAIH,KAAJ,CAAU,kBAAV,CAAN;AACH;;AAED,WAAOJ,OAAOQ,KAAP,CACHtB,wBAAwBI,MADrB,EAEHJ,wBAAwBI,MAAxB,GAAiCe,OAAOC,GAAP,CAAWC,kBAFzC,CAAP;AAIH","file":"recoverykey.js","sourcesContent":["/*\nCopyright 2018 New Vector Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport bs58 from 'bs58';\n\n// picked arbitrarily but to try & avoid clashing with any bitcoin ones\n// (which are also base58 encoded, but bitcoin's involve a lot more hashing)\nconst OLM_RECOVERY_KEY_PREFIX = [0x8B, 0x01];\n\nexport function encodeRecoveryKey(key) {\n    const buf = new Uint8Array(OLM_RECOVERY_KEY_PREFIX.length + key.length + 1);\n    buf.set(OLM_RECOVERY_KEY_PREFIX, 0);\n    buf.set(key, OLM_RECOVERY_KEY_PREFIX.length);\n\n    let parity = 0;\n    for (let i = 0; i < buf.length - 1; ++i) {\n        parity ^= buf[i];\n    }\n    buf[buf.length - 1] = parity;\n    const base58key = bs58.encode(buf);\n\n    return base58key.match(/.{1,4}/g).join(\" \");\n}\n\nexport function decodeRecoveryKey(recoverykey) {\n    const result = bs58.decode(recoverykey.replace(/ /g, ''));\n\n    let parity = 0;\n    for (const b of result) {\n        parity ^= b;\n    }\n    if (parity !== 0) {\n        throw new Error(\"Incorrect parity\");\n    }\n\n    for (let i = 0; i < OLM_RECOVERY_KEY_PREFIX.length; ++i) {\n        if (result[i] !== OLM_RECOVERY_KEY_PREFIX[i]) {\n            throw new Error(\"Incorrect prefix\");\n        }\n    }\n\n    if (\n        result.length !==\n        OLM_RECOVERY_KEY_PREFIX.length + global.Olm.PRIVATE_KEY_LENGTH + 1\n    ) {\n        throw new Error(\"Incorrect length\");\n    }\n\n    return result.slice(\n        OLM_RECOVERY_KEY_PREFIX.length,\n        OLM_RECOVERY_KEY_PREFIX.length + global.Olm.PRIVATE_KEY_LENGTH,\n    );\n}\n"]}