{"version":3,"sources":["../src/errors.js"],"names":["InvalidStoreError","InvalidCryptoStoreError","reason","value","message","instance","Error","TOGGLED_LAZY_LOADING","prototype","constructor","enumerable","writable","configurable","name","TOO_NEW"],"mappings":";;;;;;;;;;;;;;;;;;;;;;QAEgBA,iB,GAAAA,iB;QAuBAC,uB,GAAAA,uB;;;;AAzBhB;AACA;AACO,SAASD,iBAAT,CAA2BE,MAA3B,EAAmCC,KAAnC,EAA0C;AAC7C,MAAMC,UAAU,8BAA4BF,MAA5B,8EAAhB;AAEA,MAAMG,WAAW,yBAAkBC,KAAlB,EAAyB,CAACF,OAAD,CAAzB,CAAjB;AACA,gCAAuBC,QAAvB,EAAiC,8BAAuB,IAAvB,CAAjC;AACAA,WAASH,MAAT,GAAkBA,MAAlB;AACAG,WAASF,KAAT,GAAiBA,KAAjB;AACA,SAAOE,QAAP;AACH;;AAEDL,kBAAkBO,oBAAlB,GAAyC,sBAAzC;;AAEAP,kBAAkBQ,SAAlB,GAA8B,sBAAcF,MAAME,SAApB,EAA+B;AAC3DC,eAAa;AACXN,WAAOG,KADI;AAEXI,gBAAY,KAFD;AAGXC,cAAU,IAHC;AAIXC,kBAAc;AAJH;AAD8C,CAA/B,CAA9B;AAQA,8BAAuBZ,iBAAvB,EAA0CM,KAA1C;;AAGO,SAASL,uBAAT,CAAiCC,MAAjC,EAAyC;AAC5C,MAAME,UAAU,qCAAmCF,MAAnC,8EAAhB;AAEA,MAAMG,WAAW,yBAAkBC,KAAlB,EAAyB,CAACF,OAAD,CAAzB,CAAjB;AACA,gCAAuBC,QAAvB,EAAiC,8BAAuB,IAAvB,CAAjC;AACAA,WAASH,MAAT,GAAkBA,MAAlB;AACAG,WAASQ,IAAT,GAAgB,yBAAhB;AACA,SAAOR,QAAP;AACH;;AAEDJ,wBAAwBa,OAAxB,GAAkC,SAAlC;;AAEAb,wBAAwBO,SAAxB,GAAoC,sBAAcF,MAAME,SAApB,EAA+B;AACjEC,eAAa;AACXN,WAAOG,KADI;AAEXI,gBAAY,KAFD;AAGXC,cAAU,IAHC;AAIXC,kBAAc;AAJH;AADoD,CAA/B,CAApC;AAQA,8BAAuBX,uBAAvB,EAAgDK,KAAhD","file":"errors.js","sourcesContent":["// can't just do InvalidStoreError extends Error\n// because of http://babeljs.io/docs/usage/caveats/#classes\nexport function InvalidStoreError(reason, value) {\n    const message = `Store is invalid because ${reason}, ` +\n        `please stop the client, delete all data and start the client again`;\n    const instance = Reflect.construct(Error, [message]);\n    Reflect.setPrototypeOf(instance, Reflect.getPrototypeOf(this));\n    instance.reason = reason;\n    instance.value = value;\n    return instance;\n}\n\nInvalidStoreError.TOGGLED_LAZY_LOADING = \"TOGGLED_LAZY_LOADING\";\n\nInvalidStoreError.prototype = Object.create(Error.prototype, {\n  constructor: {\n    value: Error,\n    enumerable: false,\n    writable: true,\n    configurable: true,\n  },\n});\nReflect.setPrototypeOf(InvalidStoreError, Error);\n\n\nexport function InvalidCryptoStoreError(reason) {\n    const message = `Crypto store is invalid because ${reason}, ` +\n        `please stop the client, delete all data and start the client again`;\n    const instance = Reflect.construct(Error, [message]);\n    Reflect.setPrototypeOf(instance, Reflect.getPrototypeOf(this));\n    instance.reason = reason;\n    instance.name = 'InvalidCryptoStoreError';\n    return instance;\n}\n\nInvalidCryptoStoreError.TOO_NEW = \"TOO_NEW\";\n\nInvalidCryptoStoreError.prototype = Object.create(Error.prototype, {\n  constructor: {\n    value: Error,\n    enumerable: false,\n    writable: true,\n    configurable: true,\n  },\n});\nReflect.setPrototypeOf(InvalidCryptoStoreError, Error);\n"]}